// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    Mux16(a=instruction ,b=outALUMUX ,sel=instruction[15] ,out=outmux);
    ARegister(in=outmux, load=instruction[5], out=outAregPc, out[0..14]=addressM, out=outAreg);
    Mux16(a=outAreg ,b=inM ,sel=instruction[12] ,out=outSECmux);
    DRegister(in=outALUMUX ,load=instruction[4] ,out=outDreg);
    ALU(x=outDreg ,y=outSECmux ,zx=instruction[11] ,nx=instruction[10] ,zy=instruction[9] ,ny=instruction[8] ,f=instruction[7] ,no=instruction[6] ,out=outALUMUX ,out=OutM ,zr=outZR ,ng=outNg); 
    Or(a=instruction[3] ,b=true ,out=writeM);

    Or(a=outZR, b=outNg, out=outsmallZero);	
    Not(in=outsmallZero , out=outbigzero);

    And(a=instruction[0], b=outbigzero, out=JGT);
    And(a=instruction[1], b=outZR, out=JEQ);
    And(a=instruction[2], b=outNg, out=JLT);
    Or8Way(in[0]=JLT, in[1]=JEQ, in[2]=JGT, in[3..7]=false, out=outLoad);

    PC(in=outAregPc ,load=outLoad ,inc=true ,reset=reset ,out[0..14]=pc); 

   



}
