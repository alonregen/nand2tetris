// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.Not(in=inst15, out=w3);
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
        Mux16(a=instruction, b=outALUMUX ,sel=andFive ,out=outmux);
        And(a=instruction[15], b=instruction[5], out=andFive);
        Not(in=instruction[15], out=NotFifteen);
        And(a=instruction[15], b=instruction[4], out=andFour);
        And(a=instruction[15], b=instruction[3], out=writeM);
        Or(a=NotFifteen, b=andFive, out=loadA);
        ARegister(in=outmux, load=loadA, out[0..14]=addressM, out=outAreg);
        DRegister(in=outALUMUX ,load=andFour ,out=outDreg);
        And(a=instruction[12], b=instruction[15], out=instructionSecondmux);
        Mux16(a=outAreg ,b=inM ,sel=instructionSecondmux ,out=outSECmux);
        ALU(x=outDreg ,y=outSECmux ,zx=instruction[11]
        ,nx=instruction[10] ,zy=instruction[9] 
        ,ny=instruction[8] ,f=instruction[7] 
        ,no=instruction[6] ,out=outALUMUX ,out=outM ,zr=outZR ,ng=outNg); 
        Not(in=outNg, out=outNgNot);
        Not(in=outZR, out=outZRNot);
        And(a=outNgNot, b=outZRNot, out=possitiveNum);
        And(a=instruction[0], b=possitiveNum, out=JLargezero);
        And(a=instruction[1], b=outZR, out=JEqualZero);
        And(a=instruction[2], b=outNg, out=JSmallZero);
        Or8Way(in[0]=JLargezero, in[1]=JEqualZero, in[2]=JSmallZero, in[3..7]=false, out=orout);
        And(a=orout, b=instruction[15], out=outLoad);
        PC(in=outAreg ,load=outLoad ,inc=true ,reset=reset ,out[0..14]=pc); 


}
